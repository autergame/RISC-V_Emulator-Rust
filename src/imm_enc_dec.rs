use instructions;

pub fn sign_extend(value: u32, bits: u32) -> i32 {
	return ((value as i32) << (32 - bits)) >> (32 - bits);
}

// 1111_1111_1111_0000_0000_0000_0000_0000 -> 1 111_1111_1111_1111_1111 1111_1111_1111
pub fn inst_i_imm_dec(inst: &instructions::_I) -> i32 {
	return sign_extend(inst.imm11_0(), 12);
}

// 0000_0000_0000_0000_0000_1111_1111_1111 -> 1111_1111_1111_0000_0000_0000_0000_0000
pub fn inst_i_imm_enc(inst: &mut instructions::_I, value: i32) {
	inst.set_imm11_0((value as u32) & 0b0000_0000_0000_0000_0000_1111_1111_1111);
}

// 0000_0001_1111_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0000_0000_0001_1111
pub fn inst_shift_imm_dec(shift: &instructions::_Shift) -> u32 {
	return shift.shamt_4_0();
}

// 0000_0000_0000_0000_0000_0000_0001_1111 -> 0000_0001_1111_0000_0000_0000_0000_0000
pub fn inst_shift_imm_enc(shift: &mut instructions::_Shift, value: u32) {
	shift.set_shamt_4_0(value & 0b0000_0000_0000_0000_0000_0000_0001_1111);
}

// 1111_1110_0000_0000_0000_1111_1000_0000 -> 1 111_1111_1111_1111_1111 1111_1111_1111
pub fn inst_s_imm_dec(s: &instructions::_S) -> i32 {
	// 1111_1110_0000_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0000_1111_1110_0000
	let s_imm1: u32 = s.imm11_5() << 5;

	// 0000_0000_0000_0000_0000_1111_1000_0000 -> 0000_0000_0000_0000_0000_0000_0001_1111
	let s_imm2: u32 = s.imm4_0();

	// 0000_0000_0000_0000_0000_1111_1111_1111
	let s_imm3: u32 = s_imm1 | s_imm2;

	// 1 111_1111_1111_1111_1111 1111_1111_1111
	return sign_extend(s_imm3, 12);
}

// 0000_0000_0000_0000_0000_1111_1111_1111 -> 1111_1110_0000_0000_0000_1111_1000_0000
pub fn inst_s_imm_enc(s: &mut instructions::_S, value: i32) {
	// 0000_0000_0000_0000_0000_1111_1110_0000 -> 1111_1110_0000_0000_0000_0000_0000_0000
	s.set_imm11_5(((value as u32) & 0b0000_0000_0000_0000_0000_1111_1110_0000) >> 5);

	// 0000_0000_0000_0000_0000_0000_0001_1111 -> 0000_0000_0000_0000_0000_1111_1000_0000
	s.set_imm4_0((value as u32) & 0b0000_0000_0000_0000_0000_0000_0001_1111);
}

// 1111_1110_0000_0000_0000_1111_1000_0000 -> 1 111_1111_1111_1111_111 1_1111_1111_111 0
pub fn inst_b_imm_dec(b: &instructions::_B) -> i32 {
	// 1000_0000_0000_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0001_0000_0000_0000
	let b_imm1: u32 = b.imm12() << 12;

	// 0000_0000_0000_0000_0000_0000_1000_0000 -> 0000_0000_0000_0000_0000_1000_0000_0000
	let b_imm2: u32 = b.imm11() << 11;

	// 0111_1110_0000_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0000_0111_1110_0000
	let b_imm3: u32 = b.imm10_5() << 5;

	// 0000_0000_0000_0000_0000_1111_0000_0000 -> 0000_0000_0000_0000_0000_0000_0001_1110
	let b_imm4: u32 = b.imm4_1() << 1;

	// 0000_0000_0000_0000_0001_1111_1111_1110
	let b_imm5: u32 = b_imm1 | b_imm2 | b_imm3 | b_imm4;

	// 1 111_1111_1111_1111_1111 1111_1111_1111
	return sign_extend(b_imm5, 13);
}

// 0000_0000_0000_0000_0001_1111_1111_1110 -> 1111_1110_0000_0000_0000_1111_1000_0000
pub fn inst_b_imm_enc(b: &mut instructions::_B, value: i32) {
	// 0000_0000_0000_0000_0001_0000_0000_0000 -> 1000_0000_0000_0000_0000_0000_0000_0000
	b.set_imm12(((value as u32) & 0b0000_0000_0000_0000_0001_0000_0000_0000) >> 12);

	// 0000_0000_0000_0000_0000_1000_0000_0000 -> 0000_0000_0000_0000_0000_0000_1000_0000
	b.set_imm11(((value as u32) & 0b0000_0000_0000_0000_0000_1000_0000_0000) >> 11);

	// 0000_0000_0000_0000_0000_0111_1110_0000 -> 0111_1110_0000_0000_0000_0000_0000_0000
	b.set_imm10_5(((value as u32) & 0b0000_0000_0000_0000_0000_0111_1110_0000) >> 5);

	// 0000_0000_0000_0000_0000_0000_0001_1110 -> 0000_0000_0000_0000_0000_1111_0000_0000
	b.set_imm4_1(((value as u32) & 0b0000_0000_0000_0000_0000_0000_0001_1110) >> 1);
}

// 1111_1111_1111_1111_1111_0000_0000_0000
pub fn inst_u_imm_dec(u: &instructions::_U) -> u32 {
	return u.imm31_12() << 12;
}

// 1111_1111_1111_1111_1111_0000_0000_0000
pub fn inst_u_imm_enc(u: &mut instructions::_U, value: u32) {
	u.set_imm31_12((value & 0b1111_1111_1111_1111_1111_0000_0000_0000) >> 12);
}

// 1111_1111_1111_1111_1111_0000_0000_0000 -> 1 111_1111_111 1_1111_1111_1111_1111_111 0
pub fn inst_j_imm_dec(j: &instructions::_J) -> i32 {
	// 1000_0000_0000_0000_0000_0000_0000_0000 -> 0000_0000_0001_0000_0000_0000_0000_0000
	let j_imm1: u32 = j.imm20() << 20;

	// 0000_0000_0000_1111_1111_0000_0000_0000 -> 0000_0000_0000_1111_1111_0000_0000_0000
	let j_imm2: u32 = j.imm19_12() << 12;

	// 0000_0000_0001_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0000_1000_0000_0000
	let j_imm3: u32 = j.imm11() << 11;

	// 0111_1111_1110_0000_0000_0000_0000_0000 -> 0000_0000_0000_0000_0000_0111_1111_1110
	let j_imm4: u32 = j.imm10_1() << 1;

	// 0000_0000_0001_1111_1111_1111_1111_1110
	let j_imm5: u32 = j_imm1 | j_imm2 | j_imm3 | j_imm4;

	// 1 111_1111_111 1_1111_1111_1111_1111_111 0
	return sign_extend(j_imm5, 21);
}

// 0000_0000_0001_1111_1111_1111_1111_1110 -> 1111_1111_1111_1111_1111_0000_0000_0000
pub fn inst_j_imm_enc(j: &mut instructions::_J, value: i32) {
	// 0000_0000_0001_0000_0000_0000_0000_0000 -> 1000_0000_0000_0000_0000_0000_0000_0000
	j.set_imm20(((value as u32) & 0b0000_0000_0001_0000_0000_0000_0000_0000) >> 20);

	// 0000_0000_0000_1111_1111_0000_0000_0000 -> 0000_0000_0000_1111_1111_0000_0000_0000
	j.set_imm19_12(((value as u32) & 0b0000_0000_0000_1111_1111_0000_0000_0000) >> 12);

	// 0000_0000_0000_0000_0000_1000_0000_0000 -> 0000_0000_0001_0000_0000_0000_0000_0000
	j.set_imm11(((value as u32) & 0b0000_0000_0000_0000_0000_1000_0000_0000) >> 11);

	// 0000_0000_0000_0000_0000_0111_1111_1110 -> 0111_1111_1110_0000_0000_0000_0000_0000
	j.set_imm10_1(((value as u32) & 0b0000_0000_0000_0000_0000_0111_1111_1110) >> 1);
}
